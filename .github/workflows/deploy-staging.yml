name: Deploy to Staging

on:
  workflow_run:
    workflows: ["End-to-End Tests"]
    branches: [staging]
    types:
      - completed

jobs:
  deploy-staging:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - uses: actions/checkout@v3
      
      # Authenticate with Google Cloud
      - id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'
      
      # Setup gcloud CLI
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'
      
      # Deploy Python scripts using custom script
      - name: Deploy Cloud Functions
        run: |
          # Set project ID for deployment
          gcloud config set project ${{ secrets.GCP_PROJECT_ID }}
          
          # Run the deployment script
          cd scripts
          python deploy_cloud_functions.py --project-id ${{ secrets.GCP_PROJECT_ID }} --config ../cloud-functions/deployment.yaml --environment staging
      
      # Push Docker images to registry
      - name: Configure Docker
        uses: docker/login-action@v2
        with:
          registry: gcr.io
          username: _json_key
          password: ${{ secrets.GCP_SA_KEY }}
      
      # Build and push processing image
      - name: Build and push processing image
        uses: docker/build-push-action@v4
        with:
          context: ./docker/processing
          push: true
          tags: gcr.io/${{ secrets.GCP_PROJECT_ID }}/icap-processing:staging
      
      # Set Cloud Scheduler jobs
      - name: Setup Cloud Scheduler
        run: |
          # Create or update scheduler jobs for email processing
          gcloud scheduler jobs create http email-processor-scheduler \
            --schedule="every 10 minutes" \
            --uri="https://us-central1-${{ secrets.GCP_PROJECT_ID }}.cloudfunctions.net/email-retriever" \
            --http-method=POST \
            --headers="Content-Type=application/json" \
            --message-body='{"maxResults": 20, "filter": "isRead eq false"}' \
            --oidc-service-account-email="${{ secrets.GCP_SERVICE_ACCOUNT }}" \
            --oidc-token-audience="https://us-central1-${{ secrets.GCP_PROJECT_ID }}.cloudfunctions.net/email-retriever" \
            --location=us-central1 \
            --attempt-deadline=120s \
            --time-zone="UTC" \
            || gcloud scheduler jobs update http email-processor-scheduler \
              --schedule="every 10 minutes" \
              --uri="https://us-central1-${{ secrets.GCP_PROJECT_ID }}.cloudfunctions.net/email-retriever" \
              --http-method=POST \
              --headers="Content-Type=application/json" \
              --message-body='{"maxResults": 20, "filter": "isRead eq false"}' \
              --oidc-service-account-email="${{ secrets.GCP_SERVICE_ACCOUNT }}" \
              --oidc-token-audience="https://us-central1-${{ secrets.GCP_PROJECT_ID }}.cloudfunctions.net/email-retriever" \
              --location=us-central1 \
              --attempt-deadline=120s \
              --time-zone="UTC"
              
          # Create or update scheduler jobs for slack processing
          gcloud scheduler jobs create http slack-processor-scheduler \
            --schedule="every 5 minutes" \
            --uri="https://us-central1-${{ secrets.GCP_PROJECT_ID }}.cloudfunctions.net/slack-retriever" \
            --http-method=POST \
            --headers="Content-Type=application/json" \
            --message-body='{"maxResults": 50}' \
            --oidc-service-account-email="${{ secrets.GCP_SERVICE_ACCOUNT }}" \
            --oidc-token-audience="https://us-central1-${{ secrets.GCP_PROJECT_ID }}.cloudfunctions.net/slack-retriever" \
            --location=us-central1 \
            --attempt-deadline=120s \
            --time-zone="UTC" \
            || gcloud scheduler jobs update http slack-processor-scheduler \
              --schedule="every 5 minutes" \
              --uri="https://us-central1-${{ secrets.GCP_PROJECT_ID }}.cloudfunctions.net/slack-retriever" \
              --http-method=POST \
              --headers="Content-Type=application/json" \
              --message-body='{"maxResults": 50}' \
              --oidc-service-account-email="${{ secrets.GCP_SERVICE_ACCOUNT }}" \
              --oidc-token-audience="https://us-central1-${{ secrets.GCP_PROJECT_ID }}.cloudfunctions.net/slack-retriever" \
              --location=us-central1 \
              --attempt-deadline=120s \
              --time-zone="UTC"